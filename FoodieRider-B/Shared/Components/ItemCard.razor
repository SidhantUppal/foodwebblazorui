@using FoodieRider.BAL.Dto
@using FoodieRider_B.Data.Models
@using FoodieRider_B.Data.Services
@using FoodieRider_B.Data.ViewModels
@using FoodieRider_B.Helper
@using Newtonsoft.Json
@inject ICartServices cartService
@inject CartState cartState
@if (item != null)
{
    <div class="bg-white border border-gray-100 transition transform duration-700 hover:shadow-xl hover:scale-105 p-4 rounded-lg relative">
        <img class="w-64 mx-auto transform transition duration-300 hover:scale-105 shadow-sm rounded-lg"
             src="@GetImageSrc(item)"
             onerror="@HandleImageError"
             alt="" />

        <div class="flex flex-col items-center my-3 space-y-2">
            <h1 class="text-gray-900 poppins text-lg">@item.Name</h1>
            <p class="text-gray-500 poppins text-sm text-center">@item.Description</p>
            <h2 class="text-gray-900 poppins text-2xl font-bold">@item.Price.ToString("F2")</h2>
            @if (IsItemExist)
            {
                <div class="custom-number-input h-10 w-32">
                    <div class="flex flex-row h-10 w-full rounded-lg relative bg-transparent mt-1">
                        <button class=" bg-primary mr-1 text-gray-600 hover:text-gray-700 hover:bg-gray-400 h-full w-20 rounded-l cursor-pointer outline-none"
                                type="button"
                                onclick="@DecreaseQuantity">
                            <span class="m-auto text-2xl font-thin">−</span>
                        </button>
                        <input type="number"
                               class="focus:outline-none text-center w-full rounded-sm bg-gray-300 font-semibold text-md hover:text-black focus:text-black md:text-basecursor-default flex items-center text-gray-700 outline-none"
                               name="custom-input-number"
                               value="@ItemQuantity" />
                        <button class="bg-primary ml-1 text-gray-600 hover:text-gray-700 hover:bg-gray-400 h-full w-20 rounded-r cursor-pointer"
                                type="button"
                                onclick="@IncreaseQuantity">
                            <span class="m-auto text-2xl font-thin">+</span>
                        </button>
                    </div>
                </div>
            }
            else
            {
                <button class="bg-primary text-white px-8 py-2 focus:outline-none poppins rounded-full mt-24 transform transition duration-300 hover:scale-105"
                        @onclick="AddToCart">
                    Add to cart
                </button>
            }
        </div>
    </div>

}
@code {
    [Parameter]
    public ItemSearch item { get; set; }
    [Parameter]
    public bool IsItemExist { get; set; }
    [Parameter]
    public int ItemQuantity { get; set; }

    private CartSearch? CartSearch { get; set; }

    private string GetImageSrc(ItemSearch item)
    {
        return !string.IsNullOrEmpty(item?.Image) ? item.Image : "https://i.postimg.cc/cJSFRcSq/pexels-valeria-boltneva-1639557.jpg";
    }

    private void HandleImageError()
    {
        // Handle image error if needed
    }
    protected async Task AddToCart()
    {
        var jsonItem = CartJson.MergeItems(cartState?.CartSearch?.Items,  item.Id);
        await ExecuteCart(jsonItem);
    }

    bool IsOpen { get; set; }
    int? cartCount { get; set; }
    void onclick()
    {
        IsOpen = !IsOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        CartSearch = cartState?.CartSearch;
        IsItemExist = CheckItem(cartState?.CartSearch?.Items);
        ItemQuantity = GetItemQty(cartState?.CartSearch?.Items);
    }
    protected async Task DecreaseQuantity()
    {
        var json =  CartJson.DecreaseQuantity(CartSearch.Items, item.Id);
        await ExecuteCart(json);
    }
    protected async Task IncreaseQuantity()
    {
        var json = CartJson.IncreaseQuantity(CartSearch.Items, item.Id);
        await ExecuteCart(json);
    }
    protected async Task ChangeQuantity(int id, int quantity)
    {
        var json = CartJson.UpdateQuantity(CartSearch.Items, id, quantity);
        await ExecuteCart(json);
    }
    private bool CheckItem(List<ItemSearch> items)
    {
        return items?.Any(x => x.Id == item.Id) ?? false;
    }
    private int GetItemQty(List<ItemSearch> items) => items?.FirstOrDefault(x => x.Id == item.Id)?.Quantity ?? 0;
    private async Task ExecuteCart(string json)
    {
        cartState.SetUpdate();
        StateHasChanged();
        CartDto dto = new()
            {
                UserId = Guid.NewGuid(),
                _cartItemsJson = json
            };
        await cartService.Add(dto);
        await cartState.IntializeCart();
        IsItemExist = CheckItem(cartState?.CartSearch?.Items);
        ItemQuantity = GetItemQty(cartState?.CartSearch?.Items);
        CartSearch = cartState?.CartSearch;
        IsOpen = true;
        cartState.SetUpdate();
        StateHasChanged();
    }
}